#include "Application.h"

// int Application(string filename, int grayscale, int brighten, int flip, int invert, int sepia, int sharpen, float amount1, float amount2)
int Application(int grayscale, int brighten, int flip, int invert, int sepia, int sharpen, float amount1, float amount2)
{
    // ifstream f(filename);
    // if (!f.is_open()) {
    //     cerr << "Error opening the file!";
    //     return 1;
    // }
    // string pixel;


    int number = 0;
    int tempData[height*3*width] = {92,47,6,100,54,18,255,0,0,255,0,0,255,0,0,0,0,0,0,0,0,71,66,255,143,115,82,40,245,194,30,184,81,133,30,21,51,1,235,19,51,51,102,102,102,102,102,38,153,6,102,9,153,153,215,10,61,92,40,3,0,50,143,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,57,22,85,42,8,88,58,135,39,6,135,31,0,89,42,11,84,32,1,97,45,17,83,17,0,86,6,0,47,24,0,22,112,50,25,148,66,100,155,70,130,154,61,140,156,53,139,155,55,141,154,65,143,173,93,145,156,80,168,147,75,155,137,67,147,115,49,137,120,60,114,121,57,119,157,84,116,154,70,149,149,51,142,157,53,133,0,0,140,120,84,52,72,35,6,78,49,108,43,11,123,35,1,92,47,13,88,37,4,101,30,0,87,37,9,73,9,0,68,28,0,26,143,83,31,153,77,135,143,65,141,158,77,132,157,71,149,157,75,149,158,88,152,142,81,157,150,92,144,152,99,156,135,84,162,113,66,145,73,31,121,59,14,80,98,44,62,154,87,98,153,72,149,162,74,144,0,0,149,154,124,98,91,61,35,74,49,101,50,20,116,36,3,97,37,1,86,45,8,91,39,4,97,32,4,83,17,0,66,27,0,38,132,75,36,146,76,131,152,85,140,153,85,149,143,75,152,125,61,142,53,1,126,132,87,60,109,68,143,88,50,124,93,57,106,83,50,111,87,58,99,80,48,102,47,5,91,135,81,52,143,76,136,145,71,140,0,0,139,116,91,71,94,69,49,69,45,88,47,18,105,38,5,91,34,0,87,47,8,88,44,8,99,27,0,92,27,8,66,26,1,54,130,82,42,153,95,136,163,108,158,154,101,170,119,70,164,138,96,129,38,5,150,47,20,54,80,55,68,84,59,106,69,44,110,90,66,95,103,82,114,110,88,125,46,14,128,116,75,59,143,92,125,154,97,146,0,0,156,31,12,0,52,33,18,79,58,77,51,22,111,40,6,90,39,0,86,41,1,91,40,3,94,35,5,90,26,8,76,16,0,57,109,68,38,126,76,124,117,73,138,112,72,134,102,66,130,99,69,120,53,31,118,25,7,78,70,51,54,51,28,103,86,61,83,76,50,118,96,75,106,88,66,124,62,32,113,93,56,81,119,74,107,114,65,130,0,0,122,27,15,1,17,4,0,93,75,81,76,48,122,42,9,111,38,0,87,39,0,90,56,19,92,47,18,106,23,7,92,13,0,59,45,8,42,56,13,67,58,22,75,47,17,82,37,7,74,35,10,62,53,33,61,49,30,84,70,46,82,86,57,106,88,54,123,101,66,124,112,81,135,90,58,145,83,47,119,78,36,107,96,47,97,76,24,112,0,0,89,22,19,4,40,33,15,66,45,60,92,67,88,61,30,124,48,12,100,44,5,96,49,9,96,79,45,102,38,15,132,36,14,84,52,19,77,45,7,85,36,6,75,56,28,71,75,47,91,83,56,109,85,66,117,72,53,118,63,41,105,92,65,99,100,64,129,101,62,138,106,66,139,108,64,141,96,46,139,71,18,119,90,33,91,74,15,105,0,0,89,29,30,16,73,70,53,46,22,86,59,35,64,70,44,83,61,30,100,56,20,100,54,12,104,92,49,113,85,48,155,54,19,147,57,24,110,39,6,106,58,27,84,72,41,103,108,74,117,91,60,151,52,31,130,108,94,84,62,51,137,41,24,92,96,70,74,125,90,136,120,71,168,110,51,160,100,33,142,78,7,121,100,30,92,107,36,113,0,0,117,36,36,24,113,111,98,94,73,145,51,31,109,48,27,69,66,43,70,76,44,98,62,22,119,57,12,120,97,52,124,92,51,164,79,43,155,45,13,133,72,40,94,97,65,121,100,64,146,74,41,148,106,84,119,92,77,142,61,50,124,78,63,93,49,24,111,83,45,89,116,63,125,88,24,153,87,15,118,103,29,105,84,12,115,116,46,96,0,0,129,44,43,38,166,163,156,205,191,224,74,61,217,54,40,88,72,55,72,98,72,98,91,54,134,69,25,143,73,29,130,74,33,136,55,18,136,63,30,107,96,63,112,109,75,145,115,77,155,122,88,163,117,92,168,85,62,159,91,72,123,108,85,129,83,50,146,63,21,122,64,12,98,89,31,94,100,40,111,113,52,116,65,5,127,88,29,81,0,0,107,136,136,136,212,212,210,196,187,240,131,125,205,49,43,138,44,32,60,99,78,62,123,92,127,104,64,168,53,13,157,65,25,111,65,28,123,72,36,115,108,72,118,115,79,156,120,84,161,139,106,166,111,86,184,82,57,153,91,66,122,99,67,131,94,54,135,92,43,129,82,25,124,77,19,108,88,33,99,125,72,109,120,73,145,128,81,141,0,0,149,200,204,207,204,205,207,225,222,223,206,207,229,88,87,208,29,27,92,47,36,40,88,64,69,90,57,124,64,27,136,57,18,114,68,32,109,50,14,116,107,69,96,113,77,155,130,98,159,141,114,171,97,76,178,89,67,135,71,45,125,69,34,107,50,1,102,77,18,82,88,23,109,109,44,119,100,43,140,117,70,131,174,139,144,195,165,194,0,0,212,201,210,217,213,218,222,219,220,217,214,219,221,201,206,215,62,63,202,34,28,66,48,31,47,57,31,75,74,45,93,80,47,118,70,36,125,65,30,113,121,81,109,129,91,170,148,118,177,137,113,189,85,66,173,29,9,120,55,30,60,43,7,81,92,40,67,90,26,115,119,52,115,105,41,150,108,54,139,145,105,141,184,159,174,208,191,204,0,0,221,203,216,225,208,217,224,222,225,224,211,216,224,225,230,212,179,184,224,25,26,180,34,24,34,21,4,52,41,20,47,114,90,73,99,72,150,85,53,136,118,78,126,124,85,167,109,81,176,106,86,156,72,54,147,41,23,103,32,9,64,78,46,47,86,37,89,87,30,96,88,26,102,111,53,112,117,69,140,118,84,145,157,141,142,202,193,173,0,0,211,203,221,235,205,219,228,210,210,199,220,222,210,226,230,220,221,226,225,159,162,220,33,31,161,24,16,43,19,8,41,97,82,39,111,91,123,93,66,142,129,92,130,103,66,179,60,38,155,30,13,108,20,6,69,31,15,48,58,35,48,103,68,66,108,62,107,104,51,115,109,52,117,113,61,130,110,69,136,106,78,132,179,166,123,229,224,187,0,0,232,199,222,238,203,221,233,213,211,211,209,210,213,206,208,211,205,210,206,206,211,204,186,189,205,64,64,188,10,9,70,44,39,20,101,90,59,111,90,123,100,68,143,101,70,149,43,30,154,12,3,89,7,0,46,39,22,29,151,123,52,112,74,158,106,58,117,110,58,118,107,57,127,88,42,129,123,89,106,188,166,136,216,206,194,218,213,216,0,0,216,197,223,240,202,221,235,220,218,212,218,219,220,217,219,220,217,222,217,218,227,214,217,226,215,214,222,214,114,122,214,20,24,115,59,56,25,85,72,73,75,52,111,100,77,120,44,38,148,14,12,85,15,7,44,125,108,32,152,126,134,159,123,158,149,105,167,115,66,166,104,58,137,101,61,128,121,90,120,183,163,130,224,214,184,222,217,218,0,0,213,186,213,234,190,211,228,225,224,213,225,227,223,223,227,225,223,232,222,224,236,219,233,245,218,231,245,227,233,247,225,206,218,227,144,150,204,78,74,149,77,62,96,96,79,110,23,21,135,6,6,57,136,132,30,206,194,147,203,182,210,205,173,205,165,125,211,125,83,184,106,65,154,122,85,138,131,101,148,180,159,142,222,212,181,221,215,216,0,0,210,190,214,238,192,213,234,213,217,201,213,219,208,211,219,208,211,223,204,213,227,201,215,230,201,218,233,206,215,232,209,214,230,206,218,230,207,198,202,216,161,154,204,100,92,181,51,48,129,44,43,79,205,202,64,227,222,210,231,222,225,225,210,228,202,179,227,139,112,217,133,103,160,157,130,158,170,150,178,198,182,181,223,216,197,222,218,216,0,0,211,185,206,233,185,205,230,213,225,199,212,226,203,211,227,200,212,230,198,214,230,195,213,229,198,205,220,201,210,226,196,212,229,198,212,227,203,213,224,203,205,209,209,147,146,210,72,66,161,132,127,91,141,142,147,203,209,143,214,222,196,207,216,201,208,211,197,156,152,204,139,134,157,157,150,148,189,184,166,204,201,192,214,214,202,223,226,208,0,0,215,182,201,231,181,201,228,204,223,188,205,227,189,206,229,187,208,232,184,210,232,186,207,223,192,204,219,194,209,224,195,207,223,200,204,220,195,199,215,188,208,221,186,200,207,200,126,124,197,172,170,127,148,158,173,206,222,141,209,232,193,207,229,193,200,219,189,184,201,187,173,185,175,175,185,167,203,214,168,207,218,195,212,224,199,230,242,202,0,0,218,175,194,224,174,193,223,202,227,183,204,234,182,205,235,179,208,238,176,210,234,181,230,246,188,223,234,217,221,232,215,214,228,213,222,239,202,217,235,203,207,226,194,205,219,186,202,212,183,154,164,178,196,217,130,204,229,175,195,225,184,206,236,178,206,235,189,191,217,191,207,233,174,200,227,190,207,236,180,202,233,186,199,229,181,210,237,180,0,0,190};

    int count = 0;

    // ofstream file("Pixels.txt");
    // file << "{";
    // cout << "Obtaining Pixels." << endl;
    // for(int i = 0; i < width*height; i++)
    // {
    //     getline(f,pixel);
    //     int num_len = 0;
    //     int number = 0;
    //     for(int j = 0; j < pixel.size()+1; j++)
    //     {
    //         int digit = (int)(pixel[j]-'0');
    //         // if(num_len == 3)
    //         // {
    //         //     tempData[count] = number;
    //         //     count++;
    //         //     number = 0;
    //         //     num_len = 0;
    //         // }
    //         if(digit != -16 && digit != -48)
    //         {
    //             number = number * 10 + digit;
    //             num_len++;
    //         }
    //         else
    //         {
    //             tempData[count] = number;
    //             file << number << ",";
    //             count++;
    //             number = 0;
    //             num_len = 0;
    //         }
    //     }
    // }
    // file << "}";
    // file.close();
    // f.close();

    int image[height][3*width];
    int row = 0;
    int col = 0;

    cout << "Entering 2D storing loop." << endl;
    for(int i = 0; i < height*3*width; i++)
    {
        // if(i % (3*width) == 0 && i > 0)
        if(col == 3*width)
        {
            row++;
            col = 0;
        }
        image[row][col] = tempData[i];
        col++;
    }
    cout << "2D Array Created." << endl;



    float amount = amount1;

    int flipHorizontal = amount1;
    int flipVertical = amount2;

    float S_amount = amount1;

    if(grayscale)
    {
        for(int i = 0; i < height; i++)
        {
            for(int j = 0; j < width; j++)
            {
                //Y=0.299⋅R+0.587⋅G+0.114⋅B
                int gray = (int)min((int)(0.299*image[i][3*j] + 0.587*image[i][3*j+1] + 0.114*image[i][3*j+2]), 255); //calculate the grayscale value
                image[i][3*j] = gray;
                image[i][3*j+1] = gray;
                image[i][3*j+2] = gray;
            }
        }
    }

    if(brighten)
    {
        for (int i = 0; i < height; i++) 
    {
        for (int j = 0; j < width; j++) 
        {
            int r = 3 * j;
            int g = 3 * j + 1;
            int b = 3 * j + 2;
            if(amount >= -1 && amount <= 1) 
            { 
                float newRed, newGreen, newBlue;
                newRed = image[i][r] + (255*amount);
                newGreen = image[i][g] + (255*amount);
                newBlue = image[i][b] + (255*amount);

                if(newRed > 255)
                    newRed = 255;
                else if(newRed < 0)
                    newRed = 0;
                
                if(newGreen > 255)
                    newGreen = 255;
                else if(newGreen < 0)
                    newGreen = 0;
                
                if(newBlue > 255)
                    newBlue = 255;
                else if(newBlue < 0)
                    newBlue = 0;
                
                image[i][r] = (int)newRed;
                image[i][g] = (int)newGreen;
                image[i][b] = (int)newBlue;
            }
        }
    }
    }

    if(flip)
    {
        if (flipHorizontal) 
        {
            for(int i = 0; i < height; i++)
            {
                int start = 0;
                int end = width - 1;
                while(start < end)
                {
                    int r = image[i][3*start];
                    int g = image[i][3*start + 1];
                    int b = image[i][3*start + 2];

                    image[i][3*start] = image[i][3*end];
                    image[i][3*start + 1] = image[i][3*end + 1];
                    image[i][3*start + 2] = image[i][3*end + 2];

                    image[i][3*end] = r;
                    image[i][3*end + 1] = g;
                    image[i][3*end + 2] = b;

                    start++;
                    end--;
                }
            }
        }
        if (flipVertical)
        {
            for(int i = 0; i < 3*width; i++)
            {
                int start = 0;
                int end = height-1;
                while(start < end)
                {
                    int temp = image[start][i];
                    image[start][i] = image[end][i];
                    image[end][i] = temp;
                    start++;
                    end--;
                }
            }    
        }
    }

    if(invert)
    {
        for (int i = 0; i < height; i++) 
        {
            for (int j = 0; j < width; j++) 
            {
                image[i][3*j] = 255-image[i][3*j];    //invert the pixel
                image[i][3*j+1] = 255-image[i][3*j+1];
                image[i][3*j+2] = 255-image[i][3*j+2];
            }
        }
    }

    if(sepia)
    {
        for(int i = 0; i < height; i++)
        {
            for(int j = 0; j < width; j++)
            {
                int r = 3 * j;
                int g = 3 * j + 1;
                int b = 3 * j + 2;
                //Y=0.299⋅R+0.587⋅G+0.114⋅B
                image[i][r] = (int) (min(0.393*image[i][r] + 0.769*image[i][g] + 0.189*image[i][b], 255.0));    //calculate the sepia value
                image[i][g] = (int) (min(0.349*image[i][r] + 0.686*image[i][g] + 0.168*image[i][b], 255.0));
                image[i][b] = (int) (min(0.272*image[i][r] + 0.534*image[i][g] + 0.131*image[i][b], 255.0));
            }
        }
    }

    if(sharpen)
    {
        S_amount = S_amount - 50;
        float factor = (S_amount + 100.0f) / 100.0f;  //factor should be between 0 and 2
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {

                int r = 3 * j;
                int g = 3 * j + 1;
                int b = 3 * j + 2;

                image[i][r] = (int)((image[i][r] - 128) * factor + 128);
                image[i][g] = (int)((image[i][g] - 128) * factor + 128); 
                image[i][b] = (int)((image[i][b] - 128) * factor + 128);

                image[i][r] = min(255, max(0, image[i][r]));    //clamp the values to be between 0 and 255
                image[i][g] = min(255, max(0, image[i][g]));
                image[i][b] = min(255, max(0, image[i][b]));
            }
        }
    }

    // ofstream outFile("Image2.txt");
    // if (!outFile)
    //     cerr << "Error: Could not create the output file." << endl;
    // else{
    //     for (int i = 0; i < height; i++) 
    //     {
    //         for (int j = 0; j < width; j++) 
    //         {
    //             outFile << image[i][3*j] << " " << image[i][3*j+1] << " " << image[i][3*j+2] << endl;
    //         }
    //     }
    //     cout << "Done writing again" << endl;
    // }
    // outFile.close();

//    vector<vector<int>> pixelData;
//    for(int i = 0; i < height; i++)
//    {
//        vector<int> v;
//        for(int j = 0; j < width; j++)
//        {
//                v.push_back(image[i][3*j]);
//                v.push_back(image[i][3*j+1]);
//                v.push_back(image[i][3*j+2]);
//        }
//        pixelData.push_back(v);
//    }
//    WriteBMP("Result.bmp", pixelData, height, width);

    return 0;
}
