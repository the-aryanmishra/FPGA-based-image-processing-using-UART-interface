// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Application_Application_Pipeline_VITIS_LOOP_61_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        image_r_address0,
        image_r_ce0,
        image_r_we0,
        image_r_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] image_r_address0;
output   image_r_ce0;
output   image_r_we0;
output  [31:0] image_r_d0;

reg ap_idle;
reg image_r_ce0;
reg image_r_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln61_fu_91_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [11:0] Application_int_int_int_int_int_int_float_float_tempData_address0;
reg    Application_int_int_int_int_int_int_float_float_tempData_ce0;
wire   [31:0] Application_int_int_int_int_int_int_float_float_tempData_q0;
wire    ap_block_pp0_stage0_11001;
reg   [11:0] i_1_reg_202;
reg   [11:0] i_1_reg_202_pp0_iter2_reg;
wire   [11:0] trunc_ln69_1_fu_141_p1;
reg   [11:0] trunc_ln69_1_reg_216;
reg   [11:0] trunc_ln69_1_reg_216_pp0_iter2_reg;
wire   [31:0] col_2_fu_145_p2;
reg   [31:0] col_2_reg_221;
wire   [63:0] i_cast_fu_165_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln69_fu_169_p1;
reg   [31:0] col_fu_34;
reg   [31:0] ap_sig_allocacmp_col_load;
wire    ap_loop_init;
reg   [31:0] row_fu_38;
wire   [31:0] row_1_fu_129_p3;
reg   [11:0] i_fu_42;
wire   [11:0] add_ln61_fu_97_p2;
wire   [0:0] icmp_ln64_fu_109_p2;
wire   [31:0] add_ln66_fu_115_p2;
wire   [31:0] col_1_fu_121_p3;
wire  signed [11:0] zext_ln69_fu_169_p0;
wire   [11:0] grp_fu_173_p3;
wire  signed [11:0] grp_fu_173_p0;
wire   [6:0] grp_fu_173_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Application_Application_Pipeline_VITIS_LOOP_61_1_Application_int_int_int_int_int_int_floabkb #(
    .DataWidth( 32 ),
    .AddressRange( 2070 ),
    .AddressWidth( 12 ))
Application_int_int_int_int_int_int_float_float_tempData_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Application_int_int_int_int_int_int_float_float_tempData_address0),
    .ce0(Application_int_int_int_int_int_int_float_float_tempData_ce0),
    .q0(Application_int_int_int_int_int_int_float_float_tempData_q0)
);

Application_mac_muladd_12s_7ns_12ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mac_muladd_12s_7ns_12ns_12_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_173_p0),
    .din1(grp_fu_173_p1),
    .din2(trunc_ln69_1_reg_216_pp0_iter2_reg),
    .ce(1'b1),
    .dout(grp_fu_173_p3)
);

Application_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            col_fu_34 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            col_fu_34 <= col_2_reg_221;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_42 <= 12'd0;
        end else if (((icmp_ln61_fu_91_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_42 <= add_ln61_fu_97_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            row_fu_38 <= 32'd0;
        end else if (((icmp_ln61_fu_91_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            row_fu_38 <= row_1_fu_129_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        i_1_reg_202 <= i_fu_42;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        i_1_reg_202_pp0_iter2_reg <= i_1_reg_202;
        trunc_ln69_1_reg_216_pp0_iter2_reg <= trunc_ln69_1_reg_216;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_fu_91_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_2_reg_221 <= col_2_fu_145_p2;
        trunc_ln69_1_reg_216 <= trunc_ln69_1_fu_141_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Application_int_int_int_int_int_int_float_float_tempData_ce0 = 1'b1;
    end else begin
        Application_int_int_int_int_int_int_float_float_tempData_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln61_fu_91_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_col_load = col_2_reg_221;
    end else begin
        ap_sig_allocacmp_col_load = col_fu_34;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        image_r_ce0 = 1'b1;
    end else begin
        image_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        image_r_we0 = 1'b1;
    end else begin
        image_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Application_int_int_int_int_int_int_float_float_tempData_address0 = i_cast_fu_165_p1;

assign add_ln61_fu_97_p2 = (i_fu_42 + 12'd1);

assign add_ln66_fu_115_p2 = (row_fu_38 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign col_1_fu_121_p3 = ((icmp_ln64_fu_109_p2[0:0] == 1'b1) ? 32'd0 : ap_sig_allocacmp_col_load);

assign col_2_fu_145_p2 = (col_1_fu_121_p3 + 32'd1);

assign grp_fu_173_p0 = row_1_fu_129_p3[11:0];

assign grp_fu_173_p1 = 12'd90;

assign i_cast_fu_165_p1 = i_1_reg_202_pp0_iter2_reg;

assign icmp_ln61_fu_91_p2 = ((i_fu_42 == 12'd2070) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_109_p2 = ((ap_sig_allocacmp_col_load == 32'd90) ? 1'b1 : 1'b0);

assign image_r_address0 = zext_ln69_fu_169_p1;

assign image_r_d0 = Application_int_int_int_int_int_int_float_float_tempData_q0;

assign row_1_fu_129_p3 = ((icmp_ln64_fu_109_p2[0:0] == 1'b1) ? add_ln66_fu_115_p2 : row_fu_38);

assign trunc_ln69_1_fu_141_p1 = col_1_fu_121_p3[11:0];

assign zext_ln69_fu_169_p0 = grp_fu_173_p3;

assign zext_ln69_fu_169_p1 = $unsigned(zext_ln69_fu_169_p0);

endmodule //Application_Application_Pipeline_VITIS_LOOP_61_1
