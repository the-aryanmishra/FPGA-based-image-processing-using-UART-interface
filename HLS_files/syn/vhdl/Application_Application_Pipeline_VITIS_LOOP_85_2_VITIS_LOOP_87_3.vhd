-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Application_Application_Pipeline_VITIS_LOOP_85_2_VITIS_LOOP_87_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    image_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    image_r_ce0 : OUT STD_LOGIC;
    image_r_we0 : OUT STD_LOGIC;
    image_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    image_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    image_r_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    image_r_ce1 : OUT STD_LOGIC;
    image_r_we1 : OUT STD_LOGIC;
    image_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    image_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_555_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_555_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_555_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_555_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_555_p_ce : OUT STD_LOGIC;
    grp_fu_559_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_559_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_559_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_559_p_ce : OUT STD_LOGIC;
    grp_fu_563_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_563_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_563_p_ce : OUT STD_LOGIC );
end;


architecture behav of Application_Application_Pipeline_VITIS_LOOP_85_2_VITIS_LOOP_87_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_3FD322D0E5604189 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010011001000101101000011100101011000000100000110001001";
    constant ap_const_lv64_3FE2C8B439581062 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100010110010001011010000111001010110000001000001100010";
    constant ap_const_lv64_3FBD2F1A9FBE76C9 : STD_LOGIC_VECTOR (63 downto 0) := "0011111110111101001011110001101010011111101111100111011011001001";
    constant ap_const_lv10_2B2 : STD_LOGIC_VECTOR (9 downto 0) := "1010110010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv12_5A : STD_LOGIC_VECTOR (11 downto 0) := "000001011010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_state27_pp0_stage2_iter8 : BOOLEAN;
    signal ap_block_state30_pp0_stage2_iter9 : BOOLEAN;
    signal ap_block_state33_pp0_stage2_iter10 : BOOLEAN;
    signal ap_block_state36_pp0_stage2_iter11 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln85_reg_498 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal icmp_ln85_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln85_reg_498_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_498_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_498_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_498_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_498_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_498_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_498_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_498_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_498_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_498_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_498_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_load_reg_502 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln85_fu_186_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln85_reg_507 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln85_fu_206_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln85_reg_512 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state29_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state35_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state38_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal mul_ln90_fu_224_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln90_reg_517 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln90_fu_246_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln90_reg_524 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln90_fu_252_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln90_reg_530 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_addr_reg_535 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal image_addr_reg_535_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_reg_535_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_reg_535_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_reg_535_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_reg_535_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_reg_535_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_reg_535_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_reg_535_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_reg_535_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_reg_535_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_reg_535_pp0_iter11_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_1_reg_541 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_1_reg_541_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_1_reg_541_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_1_reg_541_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_1_reg_541_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_1_reg_541_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_1_reg_541_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_1_reg_541_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_1_reg_541_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_1_reg_541_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_1_reg_541_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_1_reg_541_pp0_iter11_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln90_4_fu_298_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln90_4_reg_547 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_load_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_load_1_reg_557 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_addr_2_reg_562 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_2_reg_562_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_2_reg_562_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_2_reg_562_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_2_reg_562_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_2_reg_562_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_2_reg_562_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_2_reg_562_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_2_reg_562_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_2_reg_562_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_2_reg_562_pp0_iter11_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_2_reg_562_pp0_iter12_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_load_2_reg_568 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_573 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv1_reg_578 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2_reg_583 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul1_reg_588 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul2_reg_593 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul3_reg_598 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul3_reg_598_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul3_reg_598_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_reg_603 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_reg_608 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_reg_613 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_fu_434_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal gray_fu_469_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal gray_reg_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal zext_ln90_2_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln90_3_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_4_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j_fu_94 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln87_fu_307_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal i_fu_98 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln85_1_fu_214_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_102 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln85_1_fu_177_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_139_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_139_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_143_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_150_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln87_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln90_fu_224_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln90_fu_224_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_234_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln90_fu_242_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_cast1_fu_230_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln90_fu_263_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln90_2_fu_266_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln90_1_fu_276_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln90_3_fu_279_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln90_1_fu_289_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln90_2_fu_294_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_V_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_2_fu_338_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_fu_342_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal xs_exp_V_fu_328_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln515_fu_356_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln515_fu_360_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1512_fu_374_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_366_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_fu_380_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_384_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1488_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_352_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln1488_fu_396_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_400_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_fu_412_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_2_fu_406_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln818_fu_420_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_424_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_3_fu_442_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_fu_447_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_453_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln200_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter11_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to10 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to12 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal mul_ln90_fu_224_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Application_dadd_64ns_64ns_64_8_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Application_dmul_64ns_64ns_64_7_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Application_sitodp_32ns_64_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Application_mul_5ns_8ns_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Application_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_5ns_8ns_12_1_1_U9 : component Application_mul_5ns_8ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 8,
        dout_WIDTH => 12)
    port map (
        din0 => mul_ln90_fu_224_p0,
        din1 => mul_ln90_fu_224_p1,
        dout => mul_ln90_fu_224_p2);

    flow_control_loop_pipe_sequential_init_U : component Application_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter10_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage1))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter11_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage1))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage1))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage1))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage1))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage1))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    i_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_98 <= ap_const_lv5_0;
            elsif (((icmp_ln85_reg_498 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_fu_98 <= select_ln85_1_fu_214_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln85_fu_171_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_102 <= add_ln85_1_fu_177_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_102 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_94 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    j_fu_94 <= add_ln87_fu_307_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln85_fu_171_p2 = ap_const_lv1_0))) then
                add_ln85_reg_507 <= add_ln85_fu_186_p2;
                i_load_reg_502 <= ap_sig_allocacmp_i_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_reg_498 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln90_4_reg_547 <= add_ln90_4_fu_298_p2;
                image_addr_1_reg_541 <= zext_ln90_3_fu_284_p1(12 - 1 downto 0);
                image_addr_reg_535 <= zext_ln90_2_fu_271_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_reg_498 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln90_reg_530 <= add_ln90_fu_252_p2;
                mul_ln90_reg_517 <= mul_ln90_fu_224_p2;
                select_ln85_reg_512 <= select_ln85_fu_206_p3;
                sub_ln90_reg_524 <= sub_ln90_fu_246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_reg_603 <= grp_fu_555_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                conv1_reg_578 <= grp_fu_563_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                conv2_reg_583 <= grp_fu_563_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                conv_reg_573 <= grp_fu_563_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                dc_reg_608 <= grp_fu_555_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                gray_reg_624 <= gray_fu_469_p3;
                image_addr_1_reg_541_pp0_iter10_reg <= image_addr_1_reg_541_pp0_iter9_reg;
                image_addr_1_reg_541_pp0_iter11_reg <= image_addr_1_reg_541_pp0_iter10_reg;
                image_addr_1_reg_541_pp0_iter1_reg <= image_addr_1_reg_541;
                image_addr_1_reg_541_pp0_iter2_reg <= image_addr_1_reg_541_pp0_iter1_reg;
                image_addr_1_reg_541_pp0_iter3_reg <= image_addr_1_reg_541_pp0_iter2_reg;
                image_addr_1_reg_541_pp0_iter4_reg <= image_addr_1_reg_541_pp0_iter3_reg;
                image_addr_1_reg_541_pp0_iter5_reg <= image_addr_1_reg_541_pp0_iter4_reg;
                image_addr_1_reg_541_pp0_iter6_reg <= image_addr_1_reg_541_pp0_iter5_reg;
                image_addr_1_reg_541_pp0_iter7_reg <= image_addr_1_reg_541_pp0_iter6_reg;
                image_addr_1_reg_541_pp0_iter8_reg <= image_addr_1_reg_541_pp0_iter7_reg;
                image_addr_1_reg_541_pp0_iter9_reg <= image_addr_1_reg_541_pp0_iter8_reg;
                image_addr_reg_535_pp0_iter10_reg <= image_addr_reg_535_pp0_iter9_reg;
                image_addr_reg_535_pp0_iter11_reg <= image_addr_reg_535_pp0_iter10_reg;
                image_addr_reg_535_pp0_iter1_reg <= image_addr_reg_535;
                image_addr_reg_535_pp0_iter2_reg <= image_addr_reg_535_pp0_iter1_reg;
                image_addr_reg_535_pp0_iter3_reg <= image_addr_reg_535_pp0_iter2_reg;
                image_addr_reg_535_pp0_iter4_reg <= image_addr_reg_535_pp0_iter3_reg;
                image_addr_reg_535_pp0_iter5_reg <= image_addr_reg_535_pp0_iter4_reg;
                image_addr_reg_535_pp0_iter6_reg <= image_addr_reg_535_pp0_iter5_reg;
                image_addr_reg_535_pp0_iter7_reg <= image_addr_reg_535_pp0_iter6_reg;
                image_addr_reg_535_pp0_iter8_reg <= image_addr_reg_535_pp0_iter7_reg;
                image_addr_reg_535_pp0_iter9_reg <= image_addr_reg_535_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln85_reg_498 <= icmp_ln85_fu_171_p2;
                icmp_ln85_reg_498_pp0_iter10_reg <= icmp_ln85_reg_498_pp0_iter9_reg;
                icmp_ln85_reg_498_pp0_iter11_reg <= icmp_ln85_reg_498_pp0_iter10_reg;
                icmp_ln85_reg_498_pp0_iter1_reg <= icmp_ln85_reg_498;
                icmp_ln85_reg_498_pp0_iter2_reg <= icmp_ln85_reg_498_pp0_iter1_reg;
                icmp_ln85_reg_498_pp0_iter3_reg <= icmp_ln85_reg_498_pp0_iter2_reg;
                icmp_ln85_reg_498_pp0_iter4_reg <= icmp_ln85_reg_498_pp0_iter3_reg;
                icmp_ln85_reg_498_pp0_iter5_reg <= icmp_ln85_reg_498_pp0_iter4_reg;
                icmp_ln85_reg_498_pp0_iter6_reg <= icmp_ln85_reg_498_pp0_iter5_reg;
                icmp_ln85_reg_498_pp0_iter7_reg <= icmp_ln85_reg_498_pp0_iter6_reg;
                icmp_ln85_reg_498_pp0_iter8_reg <= icmp_ln85_reg_498_pp0_iter7_reg;
                icmp_ln85_reg_498_pp0_iter9_reg <= icmp_ln85_reg_498_pp0_iter8_reg;
                image_addr_2_reg_562 <= zext_ln90_4_fu_303_p1(12 - 1 downto 0);
                image_addr_2_reg_562_pp0_iter10_reg <= image_addr_2_reg_562_pp0_iter9_reg;
                image_addr_2_reg_562_pp0_iter11_reg <= image_addr_2_reg_562_pp0_iter10_reg;
                image_addr_2_reg_562_pp0_iter12_reg <= image_addr_2_reg_562_pp0_iter11_reg;
                image_addr_2_reg_562_pp0_iter2_reg <= image_addr_2_reg_562;
                image_addr_2_reg_562_pp0_iter3_reg <= image_addr_2_reg_562_pp0_iter2_reg;
                image_addr_2_reg_562_pp0_iter4_reg <= image_addr_2_reg_562_pp0_iter3_reg;
                image_addr_2_reg_562_pp0_iter5_reg <= image_addr_2_reg_562_pp0_iter4_reg;
                image_addr_2_reg_562_pp0_iter6_reg <= image_addr_2_reg_562_pp0_iter5_reg;
                image_addr_2_reg_562_pp0_iter7_reg <= image_addr_2_reg_562_pp0_iter6_reg;
                image_addr_2_reg_562_pp0_iter8_reg <= image_addr_2_reg_562_pp0_iter7_reg;
                image_addr_2_reg_562_pp0_iter9_reg <= image_addr_2_reg_562_pp0_iter8_reg;
                mul3_reg_598_pp0_iter7_reg <= mul3_reg_598;
                mul3_reg_598_pp0_iter8_reg <= mul3_reg_598_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                image_load_1_reg_557 <= image_r_q0;
                image_load_reg_552 <= image_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                image_load_2_reg_568 <= image_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul1_reg_588 <= grp_fu_559_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul2_reg_593 <= grp_fu_559_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul3_reg_598 <= grp_fu_559_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_Result_s_reg_613 <= data_V_fu_317_p1(63 downto 63);
                val_reg_618 <= val_fu_434_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter11_stage1, ap_idle_pp0_0to10, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to12, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to12 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to10 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln515_fu_360_p2 <= std_logic_vector(unsigned(zext_ln515_fu_356_p1) + unsigned(ap_const_lv12_C01));
    add_ln85_1_fu_177_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv10_1));
    add_ln85_fu_186_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv5_1));
    add_ln87_fu_307_p2 <= std_logic_vector(unsigned(select_ln85_reg_512) + unsigned(ap_const_lv5_1));
    add_ln90_1_fu_289_p2 <= std_logic_vector(signed(sub_ln90_reg_524) + signed(ap_const_lv8_2));
    add_ln90_2_fu_266_p2 <= std_logic_vector(unsigned(mul_ln90_reg_517) + unsigned(sext_ln90_fu_263_p1));
    add_ln90_3_fu_279_p2 <= std_logic_vector(unsigned(mul_ln90_reg_517) + unsigned(sext_ln90_1_fu_276_p1));
    add_ln90_4_fu_298_p2 <= std_logic_vector(unsigned(mul_ln90_reg_517) + unsigned(sext_ln90_2_fu_294_p1));
    add_ln90_fu_252_p2 <= std_logic_vector(signed(sub_ln90_fu_246_p2) + signed(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage2_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage2_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage2_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln85_reg_498)
    begin
        if (((icmp_ln85_reg_498 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter11_stage1_assign_proc : process(ap_enable_reg_pp0_iter11, icmp_ln85_reg_498_pp0_iter11_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln85_reg_498_pp0_iter11_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter11_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter11_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter11_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to10_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to10 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to12_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to12 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to12 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_98)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_98;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_102)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_102;
        end if; 
    end process;

    data_V_fu_317_p1 <= dc_reg_608;
    gray_fu_469_p3 <= 
        ap_const_lv32_FF when (icmp_ln200_fu_463_p2(0) = '1') else 
        result_V_fu_447_p3;

    grp_fu_139_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage2, mul1_reg_588, add_reg_603, ap_block_pp0_stage2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_139_p0 <= add_reg_603;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_139_p0 <= mul1_reg_588;
        else 
            grp_fu_139_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_139_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage2, mul2_reg_593, mul3_reg_598_pp0_iter8_reg, ap_block_pp0_stage2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_139_p1 <= mul3_reg_598_pp0_iter8_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_139_p1 <= mul2_reg_593;
        else 
            grp_fu_139_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_143_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, conv_reg_573, conv1_reg_578, conv2_reg_583, ap_block_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_143_p0 <= conv2_reg_583;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_143_p0 <= conv1_reg_578;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_143_p0 <= conv_reg_573;
        else 
            grp_fu_143_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_143_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_143_p1 <= ap_const_lv64_3FBD2F1A9FBE76C9;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_143_p1 <= ap_const_lv64_3FE2C8B439581062;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_143_p1 <= ap_const_lv64_3FD322D0E5604189;
        else 
            grp_fu_143_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_150_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, image_load_reg_552, image_load_1_reg_557, image_load_2_reg_568, ap_block_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_150_p0 <= image_load_2_reg_568;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_150_p0 <= image_load_1_reg_557;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_150_p0 <= image_load_reg_552;
        else 
            grp_fu_150_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_555_p_ce <= ap_const_logic_1;
    grp_fu_555_p_din0 <= grp_fu_139_p0;
    grp_fu_555_p_din1 <= grp_fu_139_p1;
    grp_fu_555_p_opcode <= ap_const_lv2_0;
    grp_fu_559_p_ce <= ap_const_logic_1;
    grp_fu_559_p_din0 <= grp_fu_143_p0;
    grp_fu_559_p_din1 <= grp_fu_143_p1;
    grp_fu_563_p_ce <= ap_const_logic_1;
    grp_fu_563_p_din0 <= grp_fu_150_p0;
    icmp_ln200_fu_463_p2 <= "1" when (signed(tmp_1_fu_453_p4) > signed(ap_const_lv24_0)) else "0";
    icmp_ln85_fu_171_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv10_2B2) else "0";
    icmp_ln87_fu_200_p2 <= "1" when (j_fu_94 = ap_const_lv5_1E) else "0";

    image_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter12, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, image_addr_reg_535_pp0_iter11_reg, image_addr_2_reg_562_pp0_iter12_reg, ap_block_pp0_stage2, zext_ln90_3_fu_284_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            image_r_address0 <= image_addr_2_reg_562_pp0_iter12_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            image_r_address0 <= image_addr_reg_535_pp0_iter11_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            image_r_address0 <= zext_ln90_3_fu_284_p1(12 - 1 downto 0);
        else 
            image_r_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    image_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter12, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, image_addr_1_reg_541_pp0_iter11_reg, zext_ln90_2_fu_271_p1, ap_block_pp0_stage2, zext_ln90_4_fu_303_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            image_r_address1 <= image_addr_1_reg_541_pp0_iter11_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            image_r_address1 <= zext_ln90_4_fu_303_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            image_r_address1 <= zext_ln90_2_fu_271_p1(12 - 1 downto 0);
        else 
            image_r_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    image_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter12, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            image_r_ce0 <= ap_const_logic_1;
        else 
            image_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter12, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            image_r_ce1 <= ap_const_logic_1;
        else 
            image_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    image_r_d0 <= gray_reg_624;
    image_r_d1 <= gray_reg_624;

    image_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            image_r_we0 <= ap_const_logic_1;
        else 
            image_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_r_we1_assign_proc : process(ap_enable_reg_pp0_iter12, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            image_r_we1 <= ap_const_logic_1;
        else 
            image_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_366_p3 <= add_ln515_fu_360_p2(11 downto 11);
    j_cast1_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln85_fu_206_p3),8));
    mantissa_fu_342_p4 <= ((ap_const_lv1_1 & p_Result_2_fu_338_p1) & ap_const_lv1_0);
    mul_ln90_fu_224_p0 <= mul_ln90_fu_224_p00(5 - 1 downto 0);
    mul_ln90_fu_224_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln85_1_fu_214_p3),12));
    mul_ln90_fu_224_p1 <= ap_const_lv12_5A(8 - 1 downto 0);
    p_Result_2_fu_338_p1 <= data_V_fu_317_p1(52 - 1 downto 0);
    r_V_2_fu_406_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_352_p1),to_integer(unsigned('0' & zext_ln1488_fu_396_p1(31-1 downto 0)))));
    r_V_fu_400_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_352_p1),to_integer(unsigned('0' & zext_ln1488_fu_396_p1(31-1 downto 0)))));
    result_V_3_fu_442_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_reg_618));
    result_V_fu_447_p3 <= 
        result_V_3_fu_442_p2 when (p_Result_s_reg_613(0) = '1') else 
        val_reg_618;
    select_ln85_1_fu_214_p3 <= 
        add_ln85_reg_507 when (icmp_ln87_fu_200_p2(0) = '1') else 
        i_load_reg_502;
    select_ln85_fu_206_p3 <= 
        ap_const_lv5_0 when (icmp_ln87_fu_200_p2(0) = '1') else 
        j_fu_94;
        sext_ln1488_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_384_p3),32));

        sext_ln1512_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_374_p2),12));

        sext_ln90_1_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln90_reg_530),12));

        sext_ln90_2_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln90_1_fu_289_p2),12));

        sext_ln90_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln90_reg_524),12));

    shl_ln_fu_234_p3 <= (select_ln85_fu_206_p3 & ap_const_lv2_0);
    sub_ln1512_fu_374_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_V_fu_328_p4));
    sub_ln90_fu_246_p2 <= std_logic_vector(unsigned(zext_ln90_fu_242_p1) - unsigned(j_cast1_fu_230_p1));
    tmp_1_fu_453_p4 <= result_V_fu_447_p3(31 downto 8);
    tmp_fu_412_p3 <= r_V_fu_400_p2(53 downto 53);
    tmp_s_fu_424_p4 <= r_V_2_fu_406_p2(84 downto 53);
    ush_fu_384_p3 <= 
        sext_ln1512_fu_380_p1 when (isNeg_fu_366_p3(0) = '1') else 
        add_ln515_fu_360_p2;
    val_fu_434_p3 <= 
        zext_ln818_fu_420_p1 when (isNeg_fu_366_p3(0) = '1') else 
        tmp_s_fu_424_p4;
    xs_exp_V_fu_328_p4 <= data_V_fu_317_p1(62 downto 52);
    zext_ln1488_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_392_p1),137));
    zext_ln15_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_342_p4),137));
    zext_ln515_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_fu_328_p4),12));
    zext_ln818_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_412_p3),32));
    zext_ln90_2_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln90_2_fu_266_p2),64));
    zext_ln90_3_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln90_3_fu_279_p2),64));
    zext_ln90_4_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln90_4_reg_547),64));
    zext_ln90_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_234_p3),8));
end behav;
