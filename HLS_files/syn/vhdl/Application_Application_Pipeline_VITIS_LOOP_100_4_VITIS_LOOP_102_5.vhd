-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Application_Application_Pipeline_VITIS_LOOP_100_4_VITIS_LOOP_102_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    image_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    image_r_ce0 : OUT STD_LOGIC;
    image_r_we0 : OUT STD_LOGIC;
    image_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    image_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    image_r_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    image_r_ce1 : OUT STD_LOGIC;
    image_r_we1 : OUT STD_LOGIC;
    image_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    image_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    brmerge_demorgan : IN STD_LOGIC_VECTOR (0 downto 0);
    mul : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_232_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_232_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_232_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_232_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_232_p_ce : OUT STD_LOGIC;
    grp_fu_566_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_566_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_566_p_ce : OUT STD_LOGIC;
    grp_p_hls_fptosi_float_i32_fu_180_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_p_hls_fptosi_float_i32_fu_180_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_p_hls_fptosi_float_i32_fu_180_p_ce : OUT STD_LOGIC );
end;


architecture behav of Application_Application_Pipeline_VITIS_LOOP_100_4_VITIS_LOOP_102_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_437F0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011011111110000000000000000";
    constant ap_const_lv10_2B2 : STD_LOGIC_VECTOR (9 downto 0) := "1010110010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv12_5A : STD_LOGIC_VECTOR (11 downto 0) := "000001011010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln100_reg_554 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_149 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal brmerge_demorgan_read_reg_550 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln100_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_554_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_554_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_554_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_554_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_554_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_554_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_load_reg_558 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln100_fu_188_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln100_reg_563 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln100_fu_208_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln100_reg_568 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal mul_ln110_fu_226_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln110_reg_573 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln104_fu_248_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln104_reg_580 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln105_fu_254_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln105_reg_586 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_addr_4_reg_591 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_4_reg_591_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_4_reg_591_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_4_reg_591_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_4_reg_591_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_4_reg_591_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_4_reg_591_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_5_reg_597 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_5_reg_597_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_5_reg_597_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_5_reg_597_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_5_reg_597_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_5_reg_597_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_5_reg_597_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_6_reg_603 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_6_reg_603_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_6_reg_603_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_6_reg_603_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_6_reg_603_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_6_reg_603_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_6_reg_603_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_load_3_reg_609 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_load_4_reg_614 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_load_5_reg_619 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_reg_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv4_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv5_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal newRed_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal newGreen_reg_647 : STD_LOGIC_VECTOR (31 downto 0);
    signal newBlue_reg_655 : STD_LOGIC_VECTOR (31 downto 0);
    signal newRed_1_fu_381_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newRed_1_reg_663 : STD_LOGIC_VECTOR (31 downto 0);
    signal newGreen_1_fu_449_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newGreen_1_reg_668 : STD_LOGIC_VECTOR (31 downto 0);
    signal newBlue_1_fu_517_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newBlue_1_reg_673 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal grp_p_hls_fptosi_float_i32_fu_126_x : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_hls_fptosi_float_i32_fu_126_ap_ce : STD_LOGIC;
    signal ap_block_state2_pp0_stage1_iter0_ignore_call48 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1_ignore_call48 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2_ignore_call48 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter3_ignore_call48 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter4_ignore_call48 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter5_ignore_call48 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter6_ignore_call48 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter7_ignore_call48 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp153 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0_ignore_call48 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1_ignore_call48 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter2_ignore_call48 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter3_ignore_call48 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter4_ignore_call48 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter5_ignore_call48 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter6_ignore_call48 : BOOLEAN;
    signal ap_block_pp0_stage2_11001_ignoreCallOp167 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call50 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1_ignore_call50 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2_ignore_call50 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3_ignore_call50 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter4_ignore_call50 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter5_ignore_call50 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter6_ignore_call50 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter7_ignore_call50 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp170 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln110_1_fu_273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln111_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_70 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln102_fu_310_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_74 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln100_1_fu_216_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten6_fu_78 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln100_1_fu_179_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten6_load : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_132_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_136_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_139_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_144_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln102_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln110_fu_226_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln110_fu_226_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1_fu_236_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln104_fu_244_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_cast2_fu_232_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln110_fu_265_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln110_fu_268_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln111_fu_278_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln111_fu_281_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln106_fu_291_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln112_fu_296_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln112_fu_300_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln114_fu_320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_323_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln114_fu_333_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln114_1_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln114_1_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln114_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln116_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln114_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln114_fu_367_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln119_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_391_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln119_fu_401_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln119_1_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln119_1_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln119_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln121_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln119_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln119_fu_435_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln124_fu_456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_459_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln124_fu_469_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln124_1_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln124_1_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln124_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln126_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln124_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln124_fu_503_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter6_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to5 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to7 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln110_fu_226_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_condition_322 : BOOLEAN;
    signal ap_condition_327 : BOOLEAN;
    signal ap_condition_332 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component Application_p_hls_fptosi_float_i32 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component Application_fadd_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Application_sitofp_32ns_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Application_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Application_mul_5ns_8ns_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Application_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fcmp_32ns_32ns_1_2_no_dsp_1_U14 : component Application_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_139_p0,
        din1 => ap_const_lv32_437F0000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_139_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U15 : component Application_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_144_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_144_p2);

    mul_5ns_8ns_12_1_1_U16 : component Application_mul_5ns_8ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 8,
        dout_WIDTH => 12)
    port map (
        din0 => mul_ln110_fu_226_p0,
        din1 => mul_ln110_fu_226_p1,
        dout => mul_ln110_fu_226_p2);

    flow_control_loop_pipe_sequential_init_U : component Application_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to5 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter6_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to5 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter6_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to5 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter6_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to5 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter6_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to5 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter6_stage1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to5 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter6_stage1))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    i_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_74 <= ap_const_lv5_0;
            elsif (((icmp_ln100_reg_554 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_fu_74 <= select_ln100_1_fu_216_p3;
            end if; 
        end if;
    end process;

    indvar_flatten6_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln100_fu_173_p2 = ap_const_lv1_0))) then 
                    indvar_flatten6_fu_78 <= add_ln100_1_fu_179_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten6_fu_78 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_70 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    j_fu_70 <= add_ln102_fu_310_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln100_fu_173_p2 = ap_const_lv1_0))) then
                add_ln100_reg_563 <= add_ln100_fu_188_p2;
                i_load_reg_558 <= ap_sig_allocacmp_i_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_reg_554 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln105_reg_586 <= add_ln105_fu_254_p2;
                mul_ln110_reg_573 <= mul_ln110_fu_226_p2;
                select_ln100_reg_568 <= select_ln100_fu_208_p3;
                sub_ln104_reg_580 <= sub_ln104_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((brmerge_demorgan_read_reg_550 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                conv3_reg_624 <= grp_fu_566_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((brmerge_demorgan_read_reg_550 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                conv4_reg_629 <= grp_fu_566_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((brmerge_demorgan_read_reg_550 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                conv5_reg_634 <= grp_fu_566_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln100_reg_554 <= icmp_ln100_fu_173_p2;
                icmp_ln100_reg_554_pp0_iter1_reg <= icmp_ln100_reg_554;
                icmp_ln100_reg_554_pp0_iter2_reg <= icmp_ln100_reg_554_pp0_iter1_reg;
                icmp_ln100_reg_554_pp0_iter3_reg <= icmp_ln100_reg_554_pp0_iter2_reg;
                icmp_ln100_reg_554_pp0_iter4_reg <= icmp_ln100_reg_554_pp0_iter3_reg;
                icmp_ln100_reg_554_pp0_iter5_reg <= icmp_ln100_reg_554_pp0_iter4_reg;
                icmp_ln100_reg_554_pp0_iter6_reg <= icmp_ln100_reg_554_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_reg_554 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                image_addr_4_reg_591 <= zext_ln110_1_fu_273_p1(12 - 1 downto 0);
                image_addr_5_reg_597 <= zext_ln111_fu_286_p1(12 - 1 downto 0);
                image_addr_6_reg_603 <= zext_ln112_fu_305_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                image_addr_4_reg_591_pp0_iter1_reg <= image_addr_4_reg_591;
                image_addr_4_reg_591_pp0_iter2_reg <= image_addr_4_reg_591_pp0_iter1_reg;
                image_addr_4_reg_591_pp0_iter3_reg <= image_addr_4_reg_591_pp0_iter2_reg;
                image_addr_4_reg_591_pp0_iter4_reg <= image_addr_4_reg_591_pp0_iter3_reg;
                image_addr_4_reg_591_pp0_iter5_reg <= image_addr_4_reg_591_pp0_iter4_reg;
                image_addr_4_reg_591_pp0_iter6_reg <= image_addr_4_reg_591_pp0_iter5_reg;
                image_addr_5_reg_597_pp0_iter1_reg <= image_addr_5_reg_597;
                image_addr_5_reg_597_pp0_iter2_reg <= image_addr_5_reg_597_pp0_iter1_reg;
                image_addr_5_reg_597_pp0_iter3_reg <= image_addr_5_reg_597_pp0_iter2_reg;
                image_addr_5_reg_597_pp0_iter4_reg <= image_addr_5_reg_597_pp0_iter3_reg;
                image_addr_5_reg_597_pp0_iter5_reg <= image_addr_5_reg_597_pp0_iter4_reg;
                image_addr_5_reg_597_pp0_iter6_reg <= image_addr_5_reg_597_pp0_iter5_reg;
                image_addr_6_reg_603_pp0_iter1_reg <= image_addr_6_reg_603;
                image_addr_6_reg_603_pp0_iter2_reg <= image_addr_6_reg_603_pp0_iter1_reg;
                image_addr_6_reg_603_pp0_iter3_reg <= image_addr_6_reg_603_pp0_iter2_reg;
                image_addr_6_reg_603_pp0_iter4_reg <= image_addr_6_reg_603_pp0_iter3_reg;
                image_addr_6_reg_603_pp0_iter5_reg <= image_addr_6_reg_603_pp0_iter4_reg;
                image_addr_6_reg_603_pp0_iter6_reg <= image_addr_6_reg_603_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((brmerge_demorgan_read_reg_550 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                image_load_3_reg_609 <= image_r_q1;
                image_load_4_reg_614 <= image_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((brmerge_demorgan_read_reg_550 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                image_load_5_reg_619 <= image_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((brmerge_demorgan_read_reg_550 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                newBlue_1_reg_673 <= newBlue_1_fu_517_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((brmerge_demorgan_read_reg_550 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                newBlue_reg_655 <= grp_fu_232_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((brmerge_demorgan_read_reg_550 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                newGreen_1_reg_668 <= newGreen_1_fu_449_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((brmerge_demorgan_read_reg_550 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                newGreen_reg_647 <= grp_fu_232_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((brmerge_demorgan_read_reg_550 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                newRed_1_reg_663 <= newRed_1_fu_381_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((brmerge_demorgan_read_reg_550 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                newRed_reg_639 <= grp_fu_232_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((brmerge_demorgan_read_reg_550 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((brmerge_demorgan_read_reg_550 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                reg_149 <= grp_p_hls_fptosi_float_i32_fu_180_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter6_stage1, ap_idle_pp0_0to5, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to7, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to7 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to5 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter6_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln100_1_fu_179_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten6_load) + unsigned(ap_const_lv10_1));
    add_ln100_fu_188_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv5_1));
    add_ln102_fu_310_p2 <= std_logic_vector(unsigned(select_ln100_reg_568) + unsigned(ap_const_lv5_1));
    add_ln105_fu_254_p2 <= std_logic_vector(signed(sub_ln104_fu_248_p2) + signed(ap_const_lv8_1));
    add_ln106_fu_291_p2 <= std_logic_vector(signed(sub_ln104_reg_580) + signed(ap_const_lv8_2));
    add_ln110_fu_268_p2 <= std_logic_vector(unsigned(mul_ln110_reg_573) + unsigned(sext_ln110_fu_265_p1));
    add_ln111_fu_281_p2 <= std_logic_vector(unsigned(mul_ln110_reg_573) + unsigned(sext_ln111_fu_278_p1));
    add_ln112_fu_300_p2 <= std_logic_vector(unsigned(mul_ln110_reg_573) + unsigned(sext_ln112_fu_296_p1));
    and_ln114_fu_355_p2 <= (or_ln114_1_fu_349_p2 and grp_fu_139_p2);
    and_ln116_fu_361_p2 <= (or_ln114_1_fu_349_p2 and grp_fu_144_p2);
    and_ln119_fu_423_p2 <= (or_ln119_1_fu_417_p2 and grp_fu_139_p2);
    and_ln121_fu_429_p2 <= (or_ln119_1_fu_417_p2 and grp_fu_144_p2);
    and_ln124_fu_491_p2 <= (or_ln124_1_fu_485_p2 and grp_fu_139_p2);
    and_ln126_fu_497_p2 <= (or_ln124_1_fu_485_p2 and grp_fu_144_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp170 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001_ignoreCallOp153 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001_ignoreCallOp167 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter3_ignore_call50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter3_ignore_call48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter3_ignore_call48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter4_ignore_call50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter4_ignore_call48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter4_ignore_call48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter5_ignore_call50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter5_ignore_call48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter5_ignore_call48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter6_ignore_call50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter6_ignore_call48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter6_ignore_call48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter7_ignore_call50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter7_ignore_call48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0_ignore_call48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0_ignore_call48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1_ignore_call50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1_ignore_call48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1_ignore_call48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2_ignore_call50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2_ignore_call48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter2_ignore_call48 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_322_assign_proc : process(ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
                ap_condition_322 <= ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_327_assign_proc : process(ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
                ap_condition_327 <= ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2));
    end process;


    ap_condition_332_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0)
    begin
                ap_condition_332 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln100_reg_554)
    begin
        if (((icmp_ln100_reg_554 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter6_stage1_assign_proc : process(ap_enable_reg_pp0_iter6, icmp_ln100_reg_554_pp0_iter6_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln100_reg_554_pp0_iter6_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter6_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter6_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to7_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to7 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to7 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_74)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_74;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten6_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten6_fu_78)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten6_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten6_load <= indvar_flatten6_fu_78;
        end if; 
    end process;

    bitcast_ln114_fu_320_p1 <= newRed_reg_639;
    bitcast_ln119_fu_388_p1 <= newGreen_reg_647;
    bitcast_ln124_fu_456_p1 <= newBlue_reg_655;
    brmerge_demorgan_read_reg_550 <= brmerge_demorgan;

    grp_fu_132_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, conv3_reg_624, conv4_reg_629, conv5_reg_634, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_132_p0 <= conv5_reg_634;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_132_p0 <= conv4_reg_629;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_132_p0 <= conv3_reg_624;
        else 
            grp_fu_132_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_136_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, image_load_3_reg_609, image_load_4_reg_614, image_load_5_reg_619, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_136_p0 <= image_load_5_reg_619;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_136_p0 <= image_load_4_reg_614;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_136_p0 <= image_load_3_reg_609;
        else 
            grp_fu_136_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_139_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, newRed_reg_639, newGreen_reg_647, newBlue_reg_655, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_139_p0 <= newBlue_reg_655;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_139_p0 <= newGreen_reg_647;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_139_p0 <= newRed_reg_639;
        else 
            grp_fu_139_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_144_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, newRed_reg_639, newGreen_reg_647, newBlue_reg_655, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_144_p0 <= newBlue_reg_655;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_144_p0 <= newGreen_reg_647;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_144_p0 <= newRed_reg_639;
        else 
            grp_fu_144_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_232_p_ce <= ap_const_logic_1;
    grp_fu_232_p_din0 <= grp_fu_132_p0;
    grp_fu_232_p_din1 <= mul;
    grp_fu_232_p_opcode <= ap_const_lv2_0;
    grp_fu_566_p_ce <= ap_const_logic_1;
    grp_fu_566_p_din0 <= grp_fu_136_p0;

    grp_p_hls_fptosi_float_i32_fu_126_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001_ignoreCallOp153, ap_block_pp0_stage2_11001_ignoreCallOp167, ap_block_pp0_stage0_11001_ignoreCallOp170)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp170) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001_ignoreCallOp167) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp153) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_p_hls_fptosi_float_i32_fu_126_ap_ce <= ap_const_logic_1;
        else 
            grp_p_hls_fptosi_float_i32_fu_126_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_p_hls_fptosi_float_i32_fu_126_x_assign_proc : process(brmerge_demorgan_read_reg_550, newRed_1_reg_663, newGreen_1_reg_668, newBlue_1_reg_673, ap_condition_322, ap_condition_327, ap_condition_332)
    begin
        if ((brmerge_demorgan_read_reg_550 = ap_const_lv1_1)) then
            if ((ap_const_boolean_1 = ap_condition_332)) then 
                grp_p_hls_fptosi_float_i32_fu_126_x <= newBlue_1_reg_673;
            elsif ((ap_const_boolean_1 = ap_condition_327)) then 
                grp_p_hls_fptosi_float_i32_fu_126_x <= newGreen_1_reg_668;
            elsif ((ap_const_boolean_1 = ap_condition_322)) then 
                grp_p_hls_fptosi_float_i32_fu_126_x <= newRed_1_reg_663;
            else 
                grp_p_hls_fptosi_float_i32_fu_126_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_p_hls_fptosi_float_i32_fu_126_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_p_hls_fptosi_float_i32_fu_180_p_ce <= grp_p_hls_fptosi_float_i32_fu_126_ap_ce;
    grp_p_hls_fptosi_float_i32_fu_180_p_din1 <= grp_p_hls_fptosi_float_i32_fu_126_x;
    icmp_ln100_fu_173_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten6_load = ap_const_lv10_2B2) else "0";
    icmp_ln102_fu_202_p2 <= "1" when (j_fu_70 = ap_const_lv5_1E) else "0";
    icmp_ln114_1_fu_343_p2 <= "1" when (trunc_ln114_fu_333_p1 = ap_const_lv23_0) else "0";
    icmp_ln114_fu_337_p2 <= "0" when (tmp_s_fu_323_p4 = ap_const_lv8_FF) else "1";
    icmp_ln119_1_fu_411_p2 <= "1" when (trunc_ln119_fu_401_p1 = ap_const_lv23_0) else "0";
    icmp_ln119_fu_405_p2 <= "0" when (tmp_11_fu_391_p4 = ap_const_lv8_FF) else "1";
    icmp_ln124_1_fu_479_p2 <= "1" when (trunc_ln124_fu_469_p1 = ap_const_lv23_0) else "0";
    icmp_ln124_fu_473_p2 <= "0" when (tmp_14_fu_459_p4 = ap_const_lv8_FF) else "1";

    image_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, image_addr_4_reg_591_pp0_iter6_reg, image_addr_6_reg_603_pp0_iter6_reg, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage0, zext_ln111_fu_286_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            image_r_address0 <= image_addr_6_reg_603_pp0_iter6_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            image_r_address0 <= image_addr_4_reg_591_pp0_iter6_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            image_r_address0 <= zext_ln111_fu_286_p1(12 - 1 downto 0);
        else 
            image_r_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    image_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, image_addr_5_reg_597_pp0_iter6_reg, image_addr_6_reg_603, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage0, zext_ln110_1_fu_273_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            image_r_address1 <= image_addr_5_reg_597_pp0_iter6_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            image_r_address1 <= image_addr_6_reg_603;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            image_r_address1 <= zext_ln110_1_fu_273_p1(12 - 1 downto 0);
        else 
            image_r_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    image_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            image_r_ce0 <= ap_const_logic_1;
        else 
            image_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            image_r_ce1 <= ap_const_logic_1;
        else 
            image_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    image_r_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, reg_149, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, grp_p_hls_fptosi_float_i32_fu_180_p_dout0)
    begin
        if ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                image_r_d0 <= grp_p_hls_fptosi_float_i32_fu_180_p_dout0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                image_r_d0 <= reg_149;
            else 
                image_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            image_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    image_r_d1 <= reg_149;

    image_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, brmerge_demorgan_read_reg_550, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((brmerge_demorgan_read_reg_550 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((brmerge_demorgan_read_reg_550 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            image_r_we0 <= ap_const_logic_1;
        else 
            image_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_r_we1_assign_proc : process(ap_enable_reg_pp0_iter7, brmerge_demorgan_read_reg_550, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((brmerge_demorgan_read_reg_550 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            image_r_we1 <= ap_const_logic_1;
        else 
            image_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_cast2_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln100_fu_208_p3),8));
    mul_ln110_fu_226_p0 <= mul_ln110_fu_226_p00(5 - 1 downto 0);
    mul_ln110_fu_226_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln100_1_fu_216_p3),12));
    mul_ln110_fu_226_p1 <= ap_const_lv12_5A(8 - 1 downto 0);
    newBlue_1_fu_517_p3 <= 
        select_ln124_fu_503_p3 when (or_ln124_fu_511_p2(0) = '1') else 
        newBlue_reg_655;
    newGreen_1_fu_449_p3 <= 
        select_ln119_fu_435_p3 when (or_ln119_fu_443_p2(0) = '1') else 
        newGreen_reg_647;
    newRed_1_fu_381_p3 <= 
        select_ln114_fu_367_p3 when (or_ln114_fu_375_p2(0) = '1') else 
        newRed_reg_639;
    or_ln114_1_fu_349_p2 <= (icmp_ln114_fu_337_p2 or icmp_ln114_1_fu_343_p2);
    or_ln114_fu_375_p2 <= (and_ln116_fu_361_p2 or and_ln114_fu_355_p2);
    or_ln119_1_fu_417_p2 <= (icmp_ln119_fu_405_p2 or icmp_ln119_1_fu_411_p2);
    or_ln119_fu_443_p2 <= (and_ln121_fu_429_p2 or and_ln119_fu_423_p2);
    or_ln124_1_fu_485_p2 <= (icmp_ln124_fu_473_p2 or icmp_ln124_1_fu_479_p2);
    or_ln124_fu_511_p2 <= (and_ln126_fu_497_p2 or and_ln124_fu_491_p2);
    select_ln100_1_fu_216_p3 <= 
        add_ln100_reg_563 when (icmp_ln102_fu_202_p2(0) = '1') else 
        i_load_reg_558;
    select_ln100_fu_208_p3 <= 
        ap_const_lv5_0 when (icmp_ln102_fu_202_p2(0) = '1') else 
        j_fu_70;
    select_ln114_fu_367_p3 <= 
        ap_const_lv32_437F0000 when (and_ln114_fu_355_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln119_fu_435_p3 <= 
        ap_const_lv32_437F0000 when (and_ln119_fu_423_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln124_fu_503_p3 <= 
        ap_const_lv32_437F0000 when (and_ln124_fu_491_p2(0) = '1') else 
        ap_const_lv32_0;
        sext_ln110_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln104_reg_580),12));

        sext_ln111_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln105_reg_586),12));

        sext_ln112_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln106_fu_291_p2),12));

    shl_ln1_fu_236_p3 <= (select_ln100_fu_208_p3 & ap_const_lv2_0);
    sub_ln104_fu_248_p2 <= std_logic_vector(unsigned(zext_ln104_fu_244_p1) - unsigned(j_1_cast2_fu_232_p1));
    tmp_11_fu_391_p4 <= bitcast_ln119_fu_388_p1(30 downto 23);
    tmp_14_fu_459_p4 <= bitcast_ln124_fu_456_p1(30 downto 23);
    tmp_s_fu_323_p4 <= bitcast_ln114_fu_320_p1(30 downto 23);
    trunc_ln114_fu_333_p1 <= bitcast_ln114_fu_320_p1(23 - 1 downto 0);
    trunc_ln119_fu_401_p1 <= bitcast_ln119_fu_388_p1(23 - 1 downto 0);
    trunc_ln124_fu_469_p1 <= bitcast_ln124_fu_456_p1(23 - 1 downto 0);
    zext_ln104_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_236_p3),8));
    zext_ln110_1_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln110_fu_268_p2),64));
    zext_ln111_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln111_fu_281_p2),64));
    zext_ln112_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln112_fu_300_p2),64));
end behav;
