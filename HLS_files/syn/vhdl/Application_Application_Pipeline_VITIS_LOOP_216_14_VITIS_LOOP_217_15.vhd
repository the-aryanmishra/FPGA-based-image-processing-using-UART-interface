-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Application_Application_Pipeline_VITIS_LOOP_216_14_VITIS_LOOP_217_15 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    image_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    image_r_ce0 : OUT STD_LOGIC;
    image_r_we0 : OUT STD_LOGIC;
    image_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    image_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    image_r_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    image_r_ce1 : OUT STD_LOGIC;
    image_r_we1 : OUT STD_LOGIC;
    image_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    image_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    factor : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_232_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_232_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_232_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_232_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_232_p_ce : OUT STD_LOGIC;
    grp_fu_238_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_238_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_238_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_238_p_ce : OUT STD_LOGIC;
    grp_fu_566_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_566_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_566_p_ce : OUT STD_LOGIC;
    grp_p_hls_fptosi_float_i32_fu_180_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_p_hls_fptosi_float_i32_fu_180_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_p_hls_fptosi_float_i32_fu_180_p_ce : OUT STD_LOGIC );
end;


architecture behav of Application_Application_Pipeline_VITIS_LOOP_216_14_VITIS_LOOP_217_15 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_43000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011000000000000000000000000";
    constant ap_const_lv32_FFFFFF80 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110000000";
    constant ap_const_lv10_2B2 : STD_LOGIC_VECTOR (9 downto 0) := "1010110010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv12_5A : STD_LOGIC_VECTOR (11 downto 0) := "000001011010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_FF : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000011111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln216_reg_445 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln216_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_reg_445_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_reg_445_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_reg_445_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_reg_445_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_reg_445_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_reg_445_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_reg_445_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_load_reg_449 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln216_fu_185_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln216_reg_454 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln216_fu_205_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln216_reg_459 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln223_fu_223_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln223_reg_464 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln219_fu_245_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln219_reg_471 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln220_fu_251_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln220_reg_477 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_addr_reg_482 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_reg_482_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_reg_482_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_reg_482_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_reg_482_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_reg_482_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_reg_482_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_reg_482_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_3_reg_488 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_3_reg_488_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_3_reg_488_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_3_reg_488_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_3_reg_488_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_3_reg_488_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_3_reg_488_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_3_reg_488_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln225_1_fu_297_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln225_1_reg_494 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_4_reg_499 : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_4_reg_499_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_4_reg_499_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_4_reg_499_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_4_reg_499_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_4_reg_499_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_4_reg_499_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal image_addr_4_reg_499_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln223_fu_306_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln223_reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_146_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln224_reg_510 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln225_reg_515 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_reg_525 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_reg_530 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_535 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul1_reg_540 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul2_reg_545 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln224_fu_322_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln224_reg_550 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln224_reg_555 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln225_fu_326_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln225_reg_560 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln227_fu_346_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln227_reg_565 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln224_1_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln228_fu_378_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln228_reg_575 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln200_2_fu_386_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln200_2_reg_580 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln200_2_fu_394_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln200_2_reg_585 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal grp_p_hls_fptosi_float_i32_fu_113_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call35 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1_ignore_call35 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2_ignore_call35 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3_ignore_call35 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter4_ignore_call35 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter5_ignore_call35 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter6_ignore_call35 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter7_ignore_call35 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter8_ignore_call35 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp129 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0_ignore_call35 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1_ignore_call35 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2_ignore_call35 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter3_ignore_call35 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter4_ignore_call35 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter5_ignore_call35 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter6_ignore_call35 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter7_ignore_call35 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter8_ignore_call35 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp132 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0_ignore_call42 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1_ignore_call42 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter2_ignore_call42 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter3_ignore_call42 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter4_ignore_call42 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter5_ignore_call42 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter6_ignore_call42 : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter7_ignore_call42 : BOOLEAN;
    signal ap_block_pp0_stage2_11001_ignoreCallOp137 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln223_1_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln224_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_62 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln217_fu_312_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_66 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln216_1_fu_213_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten27_fu_70 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln216_1_fu_176_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten27_load : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln227_fu_358_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln229_fu_414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_118_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_123_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_127_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln217_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln223_fu_223_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln223_fu_223_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln6_fu_233_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln219_fu_241_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_4_cast5_fu_229_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln223_fu_262_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln223_1_fu_265_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln224_fu_275_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln224_1_fu_278_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln221_fu_288_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln225_fu_293_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln200_fu_330_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln200_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln200_fu_336_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln200_1_fu_362_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln200_1_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln200_1_fu_368_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln219_fu_354_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln200_2_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln229_fu_407_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter7_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to6 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to8 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal mul_ln223_fu_223_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Application_p_hls_fptosi_float_i32 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component Application_fadd_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Application_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Application_sitofp_32ns_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Application_mul_5ns_8ns_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Application_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_5ns_8ns_12_1_1_U43 : component Application_mul_5ns_8ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 8,
        dout_WIDTH => 12)
    port map (
        din0 => mul_ln223_fu_223_p0,
        din1 => mul_ln223_fu_223_p1,
        dout => mul_ln223_fu_223_p2);

    flow_control_loop_pipe_sequential_init_U : component Application_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to6 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to6 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to6 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to6 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to6 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to6 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage1))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to6 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage1))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    i_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_66 <= ap_const_lv5_0;
            elsif (((icmp_ln216_reg_445 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_fu_66 <= select_ln216_1_fu_213_p3;
            end if; 
        end if;
    end process;

    indvar_flatten27_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln216_fu_170_p2 = ap_const_lv1_0))) then 
                    indvar_flatten27_fu_70 <= add_ln216_1_fu_176_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten27_fu_70 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_62 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    j_fu_62 <= add_ln217_fu_312_p2;
                end if;
            end if; 
        end if;
    end process;

    reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    reg_136 <= image_r_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reg_136 <= image_r_q0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln216_fu_170_p2 = ap_const_lv1_0))) then
                add_ln216_reg_454 <= add_ln216_fu_185_p2;
                i_load_reg_449 <= ap_sig_allocacmp_i_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln216_reg_445 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln220_reg_477 <= add_ln220_fu_251_p2;
                mul_ln223_reg_464 <= mul_ln223_fu_223_p2;
                select_ln216_reg_459 <= select_ln216_fu_205_p3;
                sub_ln219_reg_471 <= sub_ln219_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln223_reg_505 <= add_ln223_fu_306_p2;
                icmp_ln216_reg_445 <= icmp_ln216_fu_170_p2;
                icmp_ln216_reg_445_pp0_iter1_reg <= icmp_ln216_reg_445;
                icmp_ln216_reg_445_pp0_iter2_reg <= icmp_ln216_reg_445_pp0_iter1_reg;
                icmp_ln216_reg_445_pp0_iter3_reg <= icmp_ln216_reg_445_pp0_iter2_reg;
                icmp_ln216_reg_445_pp0_iter4_reg <= icmp_ln216_reg_445_pp0_iter3_reg;
                icmp_ln216_reg_445_pp0_iter5_reg <= icmp_ln216_reg_445_pp0_iter4_reg;
                icmp_ln216_reg_445_pp0_iter6_reg <= icmp_ln216_reg_445_pp0_iter5_reg;
                icmp_ln216_reg_445_pp0_iter7_reg <= icmp_ln216_reg_445_pp0_iter6_reg;
                image_addr_4_reg_499 <= zext_ln225_fu_302_p1(12 - 1 downto 0);
                image_addr_4_reg_499_pp0_iter2_reg <= image_addr_4_reg_499;
                image_addr_4_reg_499_pp0_iter3_reg <= image_addr_4_reg_499_pp0_iter2_reg;
                image_addr_4_reg_499_pp0_iter4_reg <= image_addr_4_reg_499_pp0_iter3_reg;
                image_addr_4_reg_499_pp0_iter5_reg <= image_addr_4_reg_499_pp0_iter4_reg;
                image_addr_4_reg_499_pp0_iter6_reg <= image_addr_4_reg_499_pp0_iter5_reg;
                image_addr_4_reg_499_pp0_iter7_reg <= image_addr_4_reg_499_pp0_iter6_reg;
                image_addr_4_reg_499_pp0_iter8_reg <= image_addr_4_reg_499_pp0_iter7_reg;
                select_ln200_2_reg_580 <= select_ln200_2_fu_386_p3;
                select_ln228_reg_575 <= select_ln228_fu_378_p3;
                trunc_ln200_2_reg_585 <= trunc_ln200_2_fu_394_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln224_reg_510 <= grp_fu_146_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln216_reg_445 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln225_1_reg_494 <= add_ln225_1_fu_297_p2;
                image_addr_3_reg_488 <= zext_ln224_fu_283_p1(12 - 1 downto 0);
                image_addr_reg_482 <= zext_ln223_1_fu_270_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln225_reg_515 <= grp_fu_146_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                conv1_reg_525 <= grp_fu_566_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                conv2_reg_530 <= grp_fu_566_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                conv_reg_520 <= grp_fu_566_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                icmp_ln224_1_reg_570 <= grp_fu_130_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln224_reg_555 <= grp_fu_130_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                image_addr_3_reg_488_pp0_iter1_reg <= image_addr_3_reg_488;
                image_addr_3_reg_488_pp0_iter2_reg <= image_addr_3_reg_488_pp0_iter1_reg;
                image_addr_3_reg_488_pp0_iter3_reg <= image_addr_3_reg_488_pp0_iter2_reg;
                image_addr_3_reg_488_pp0_iter4_reg <= image_addr_3_reg_488_pp0_iter3_reg;
                image_addr_3_reg_488_pp0_iter5_reg <= image_addr_3_reg_488_pp0_iter4_reg;
                image_addr_3_reg_488_pp0_iter6_reg <= image_addr_3_reg_488_pp0_iter5_reg;
                image_addr_3_reg_488_pp0_iter7_reg <= image_addr_3_reg_488_pp0_iter6_reg;
                image_addr_reg_482_pp0_iter1_reg <= image_addr_reg_482;
                image_addr_reg_482_pp0_iter2_reg <= image_addr_reg_482_pp0_iter1_reg;
                image_addr_reg_482_pp0_iter3_reg <= image_addr_reg_482_pp0_iter2_reg;
                image_addr_reg_482_pp0_iter4_reg <= image_addr_reg_482_pp0_iter3_reg;
                image_addr_reg_482_pp0_iter5_reg <= image_addr_reg_482_pp0_iter4_reg;
                image_addr_reg_482_pp0_iter6_reg <= image_addr_reg_482_pp0_iter5_reg;
                image_addr_reg_482_pp0_iter7_reg <= image_addr_reg_482_pp0_iter6_reg;
                select_ln227_reg_565 <= select_ln227_fu_346_p3;
                trunc_ln225_reg_560 <= trunc_ln225_fu_326_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul1_reg_540 <= grp_fu_238_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul2_reg_545 <= grp_fu_238_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_reg_535 <= grp_fu_238_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                reg_141 <= grp_fu_232_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                trunc_ln224_reg_550 <= trunc_ln224_fu_322_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter7_stage1, ap_idle_pp0_0to6, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to8, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to8 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to6 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter7_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln216_1_fu_176_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten27_load) + unsigned(ap_const_lv10_1));
    add_ln216_fu_185_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv5_1));
    add_ln217_fu_312_p2 <= std_logic_vector(unsigned(select_ln216_reg_459) + unsigned(ap_const_lv5_1));
    add_ln220_fu_251_p2 <= std_logic_vector(signed(sub_ln219_fu_245_p2) + signed(ap_const_lv8_1));
    add_ln221_fu_288_p2 <= std_logic_vector(signed(sub_ln219_reg_471) + signed(ap_const_lv8_2));
    add_ln223_1_fu_265_p2 <= std_logic_vector(unsigned(mul_ln223_reg_464) + unsigned(sext_ln223_fu_262_p1));
    add_ln223_fu_306_p2 <= std_logic_vector(unsigned(image_r_q1) + unsigned(ap_const_lv32_FFFFFF80));
    add_ln224_1_fu_278_p2 <= std_logic_vector(unsigned(mul_ln223_reg_464) + unsigned(sext_ln224_fu_275_p1));
    add_ln225_1_fu_297_p2 <= std_logic_vector(unsigned(mul_ln223_reg_464) + unsigned(sext_ln225_fu_293_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp129 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001_ignoreCallOp132 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001_ignoreCallOp137 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter3_ignore_call35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter3_ignore_call35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter3_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter4_ignore_call35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter4_ignore_call35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter4_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter5_ignore_call35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter5_ignore_call35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter5_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter6_ignore_call35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter6_ignore_call35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter6_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter7_ignore_call35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter7_ignore_call35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage2_iter7_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter8_ignore_call35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter8_ignore_call35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0_ignore_call35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1_ignore_call35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1_ignore_call35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2_ignore_call35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2_ignore_call35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter2_ignore_call42 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln216_reg_445)
    begin
        if (((icmp_ln216_reg_445 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter7_stage1_assign_proc : process(ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage1, icmp_ln216_reg_445_pp0_iter7_reg, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln216_reg_445_pp0_iter7_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter7_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter7_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to6_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to8_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to8 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to8 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_66)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_66;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten27_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten27_fu_70)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten27_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten27_load <= indvar_flatten27_fu_70;
        end if; 
    end process;


    grp_fu_118_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, mul_reg_535, mul1_reg_540, mul2_reg_545, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_118_p0 <= mul2_reg_545;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_118_p0 <= mul1_reg_540;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_118_p0 <= mul_reg_535;
        else 
            grp_fu_118_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_123_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, conv_reg_520, conv1_reg_525, conv2_reg_530, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_123_p0 <= conv2_reg_530;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_123_p0 <= conv1_reg_525;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_123_p0 <= conv_reg_520;
        else 
            grp_fu_123_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_127_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, add_ln223_reg_505, add_ln224_reg_510, add_ln225_reg_515, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_127_p0 <= add_ln225_reg_515;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_127_p0 <= add_ln224_reg_510;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_127_p0 <= add_ln223_reg_505;
        else 
            grp_fu_127_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_130_p2 <= "1" when (signed(grp_p_hls_fptosi_float_i32_fu_180_p_dout0) > signed(ap_const_lv32_0)) else "0";
    grp_fu_146_p2 <= std_logic_vector(unsigned(reg_136) + unsigned(ap_const_lv32_FFFFFF80));
    grp_fu_232_p_ce <= ap_const_logic_1;
    grp_fu_232_p_din0 <= grp_fu_118_p0;
    grp_fu_232_p_din1 <= ap_const_lv32_43000000;
    grp_fu_232_p_opcode <= ap_const_lv2_0;
    grp_fu_238_p_ce <= ap_const_logic_1;
    grp_fu_238_p_din0 <= grp_fu_123_p0;
    grp_fu_238_p_din1 <= factor;
    grp_fu_566_p_ce <= ap_const_logic_1;
    grp_fu_566_p_din0 <= grp_fu_127_p0;

    grp_p_hls_fptosi_float_i32_fu_113_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001_ignoreCallOp129, ap_block_pp0_stage1_11001_ignoreCallOp132, ap_block_pp0_stage2_11001_ignoreCallOp137)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001_ignoreCallOp137) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp132) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp129) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_p_hls_fptosi_float_i32_fu_113_ap_ce <= ap_const_logic_1;
        else 
            grp_p_hls_fptosi_float_i32_fu_113_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_p_hls_fptosi_float_i32_fu_180_p_ce <= grp_p_hls_fptosi_float_i32_fu_113_ap_ce;
    grp_p_hls_fptosi_float_i32_fu_180_p_din1 <= reg_141;
    icmp_ln200_1_fu_372_p2 <= "1" when (unsigned(select_ln200_1_fu_362_p3) < unsigned(ap_const_lv31_FF)) else "0";
    icmp_ln200_2_fu_402_p2 <= "1" when (unsigned(select_ln200_2_reg_580) < unsigned(ap_const_lv31_FF)) else "0";
    icmp_ln200_fu_340_p2 <= "1" when (unsigned(select_ln200_fu_330_p3) < unsigned(ap_const_lv31_FF)) else "0";
    icmp_ln216_fu_170_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten27_load = ap_const_lv10_2B2) else "0";
    icmp_ln217_fu_199_p2 <= "1" when (j_fu_62 = ap_const_lv5_1E) else "0";

    image_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, image_addr_reg_482_pp0_iter7_reg, image_addr_4_reg_499_pp0_iter8_reg, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln224_fu_283_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            image_r_address0 <= image_addr_4_reg_499_pp0_iter8_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            image_r_address0 <= image_addr_reg_482_pp0_iter7_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            image_r_address0 <= zext_ln224_fu_283_p1(12 - 1 downto 0);
        else 
            image_r_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    image_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, image_addr_3_reg_488_pp0_iter7_reg, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln223_1_fu_270_p1, zext_ln225_fu_302_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            image_r_address1 <= image_addr_3_reg_488_pp0_iter7_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            image_r_address1 <= zext_ln225_fu_302_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            image_r_address1 <= zext_ln223_1_fu_270_p1(12 - 1 downto 0);
        else 
            image_r_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    image_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            image_r_ce0 <= ap_const_logic_1;
        else 
            image_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            image_r_ce1 <= ap_const_logic_1;
        else 
            image_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    image_r_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln227_fu_358_p1, zext_ln229_fu_414_p1)
    begin
        if ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                image_r_d0 <= zext_ln229_fu_414_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                image_r_d0 <= zext_ln227_fu_358_p1;
            else 
                image_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            image_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    image_r_d1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln228_reg_575),32));

    image_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            image_r_we0 <= ap_const_logic_1;
        else 
            image_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_r_we1_assign_proc : process(ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            image_r_we1 <= ap_const_logic_1;
        else 
            image_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    j_4_cast5_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln216_fu_205_p3),8));
    mul_ln223_fu_223_p0 <= mul_ln223_fu_223_p00(5 - 1 downto 0);
    mul_ln223_fu_223_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln216_1_fu_213_p3),12));
    mul_ln223_fu_223_p1 <= ap_const_lv12_5A(8 - 1 downto 0);
    select_ln200_1_fu_362_p3 <= 
        trunc_ln225_reg_560 when (icmp_ln224_1_reg_570(0) = '1') else 
        ap_const_lv31_0;
    select_ln200_2_fu_386_p3 <= 
        trunc_ln219_fu_354_p1 when (grp_fu_130_p2(0) = '1') else 
        ap_const_lv31_0;
    select_ln200_fu_330_p3 <= 
        trunc_ln224_reg_550 when (icmp_ln224_reg_555(0) = '1') else 
        ap_const_lv31_0;
    select_ln216_1_fu_213_p3 <= 
        add_ln216_reg_454 when (icmp_ln217_fu_199_p2(0) = '1') else 
        i_load_reg_449;
    select_ln216_fu_205_p3 <= 
        ap_const_lv5_0 when (icmp_ln217_fu_199_p2(0) = '1') else 
        j_fu_62;
    select_ln227_fu_346_p3 <= 
        trunc_ln200_fu_336_p1 when (icmp_ln200_fu_340_p2(0) = '1') else 
        ap_const_lv8_FF;
    select_ln228_fu_378_p3 <= 
        trunc_ln200_1_fu_368_p1 when (icmp_ln200_1_fu_372_p2(0) = '1') else 
        ap_const_lv8_FF;
    select_ln229_fu_407_p3 <= 
        trunc_ln200_2_reg_585 when (icmp_ln200_2_fu_402_p2(0) = '1') else 
        ap_const_lv8_FF;
        sext_ln223_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln219_reg_471),12));

        sext_ln224_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln220_reg_477),12));

        sext_ln225_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln221_fu_288_p2),12));

    shl_ln6_fu_233_p3 <= (select_ln216_fu_205_p3 & ap_const_lv2_0);
    sub_ln219_fu_245_p2 <= std_logic_vector(unsigned(zext_ln219_fu_241_p1) - unsigned(j_4_cast5_fu_229_p1));
    trunc_ln200_1_fu_368_p1 <= select_ln200_1_fu_362_p3(8 - 1 downto 0);
    trunc_ln200_2_fu_394_p1 <= select_ln200_2_fu_386_p3(8 - 1 downto 0);
    trunc_ln200_fu_336_p1 <= select_ln200_fu_330_p3(8 - 1 downto 0);
    trunc_ln219_fu_354_p1 <= grp_p_hls_fptosi_float_i32_fu_180_p_dout0(31 - 1 downto 0);
    trunc_ln224_fu_322_p1 <= grp_p_hls_fptosi_float_i32_fu_180_p_dout0(31 - 1 downto 0);
    trunc_ln225_fu_326_p1 <= grp_p_hls_fptosi_float_i32_fu_180_p_dout0(31 - 1 downto 0);
    zext_ln219_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln6_fu_233_p3),8));
    zext_ln223_1_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln223_1_fu_265_p2),64));
    zext_ln224_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln224_1_fu_278_p2),64));
    zext_ln225_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln225_1_reg_494),64));
    zext_ln227_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln227_reg_565),32));
    zext_ln229_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln229_fu_407_p3),32));
end behav;
